---
description: 
globs: 
alwaysApply: true
---
---
description: project-init & migrate rules (v1.2 – enhanced for clarity & profiling)
alwaysApply: true
globs:
  - docs/*.md
  - tasks/**/*.md
---

########################################################

# A  MEMORY & BOOTSTRAP

########################################################

* The agent resets each session – **ALWAYS read** `docs/` & `tasks/` on start.
* **Validate PRD completeness**: If `docs/PRD.md` contains unfilled placeholders (e.g. `{{ }}`) or blank sections:
  - **ABORT & ASK** the user to complete or clarify the PRD before proceeding.
* **Intent Confirmation**: If any requirements or goals in the PRD seem ambiguous or contradictory:
  - **PAUSE** generation and prompt the user with a concise clarification question.
* **Detect Project Type**: Deduce the project category – `frontend`, `backend`, `fullstack`, or `refactor` – from the PRD content and flags:
  - Check if UI/UX details (Visual Style Guide) are present, or if Tech choices indicate a client interface → **frontend** concerns.
  - Check for database/API focus with minimal UI → **backend** profile.
  - Both UI and server aspects present → **fullstack** project.
  - If `existing_repo: true` flag is set → **refactor/migration** scenario.
  - **Apply** relevant guidelines from [ProjectTypeProfiles.md](docs/ProjectTypeProfiles.md) based on the identified type (e.g. scaffold UI for frontend, emphasize API for backend, preserve existing structure for refactor).
* If `tasks/tasks_master.yaml` is missing → call **INIT_PROJECT**.
* If `existing_repo: true` flag is in this file → call **MIGRATE_EXISTING**.

########################################################

# B  TASK DECOMPOSITION  (Claude Task-Master pattern)

########################################################

*For each row in PRD §4 (Functional Requirements)*:
1. If `ComplexityGuess` is empty → estimate complexity 1–5.
2. Map complexity to subtasks: 1→1 task, 2→3 tasks, 3→5 tasks, 4→8 tasks, 5→13 tasks.
3. Emit the generated subtasks as new entries in `tasks/backlog/phase-0.md` (table with 6 columns).
4. Output a `tasks/task-complexity-report.json` for reference.

########################################################

# C  CORE SCHEMAS (for INIT / MIGRATE outputs)

########################################################

* **`docs/DESIGN.md`**:
  1️⃣ Mermaid `graph LR` diagram (≤ 50 nodes) illustrating module relationships.  
  2️⃣ “Modules” table: **ID | Name | Owner | Directory** for each major component.
* **`docs/AgentFacts.md`**:
  - Bullet list of Runtime Stack details, key External Docs (reference links), and the Embedding strategy (if any).
* **`docs/Progress.md`**:
  - Template: start with `## YYYY-MM-DD` header for each day, then ≤10 bullet points (each ≤80 chars, with emoji status markers).
* **`tasks/tasks_master.yaml`**:
  ```yaml
  total: 0
  done: 0
  blocked: []
  next_ready: []
  phases: [phase-0]
  rotations: 0
  retired: []
````

* **`tasks/backlog/phase-X.md`**:

  * Table columns: `ID | ✔ | Title | Depends | Files | Notes` (max \~300 lines per phase file).

\########################################################

# D  SELF-CHECK

\########################################################

*After INIT/MIGRATE, verify every created file matches the schema in §C.*
If any schema violation or missing section is found → **ABORT & ASK** for correction (do **not** continue).